# MS-AUTH-PY – Microservicio de Autenticación

Proyecto: Sistema Digital Twins

Este microservicio gestiona la autenticación de usuarios administradores mediante JWT, proporcionando seguridad y control de acceso dentro de la arquitectura de microservicios del sistema Digital Twins.

# Descripción general

El microservicio MS-AUTH-PY permite:

Iniciar sesión con credenciales seguras.

Generar y validar tokens JWT.

Registrar nuevos usuarios administradores.

Verificar el estado de salud del servicio y la base de datos.

Cumplir con la historia de usuario HU0:

“Como administrador, quiero iniciar sesión con mis credenciales, para acceder de manera segura a las funcionalidades del sistema.”

# Características técnicas
Categoría	Tecnología
Lenguaje	Python 3.11
Framework	FastAPI
Base de datos	PostgreSQL (SQLAlchemy ORM)
Autenticación	JWT (JSON Web Token)
Cifrado de contraseñas	Bcrypt / Passlib
Entorno	Docker + .env configurable
Pruebas	Pytest + Httpx
Documentación	Swagger UI (/docs) y ReDoc (/redoc)

# Estructura del proyecto
MS-AUTH-PY/
│
├── src/
│   ├── main.py                 # Punto de entrada FastAPI
│   ├── config/                 # Configuración (.env y settings)
│   ├── models/                 # Modelos de la base de datos
│   ├── routers/                # Endpoints /login, /me, /health, /register, /logout
│   ├── schemas/                # Esquemas Pydantic (validaciones y respuestas)
│   ├── utils/                  # Utilidades de seguridad y JWT
│   └── tests/                  # Pruebas unitarias e integración
│
├── Dockerfile
├── requirements.txt
├── env.example
├── pytest.ini
└── README.md

# Configuración del entorno

Crea un archivo .env en la raíz del proyecto (basado en env.example):

APP_NAME=MS-AUTH-PY - Authentication Service
APP_VERSION=1.0.0
API_PREFIX=/api/v1/auth
DEBUG=False

DATABASE_URL=postgresql://dgt_user:dgt_pass@postgres:5432/digital_twins_db

SECRET_KEY=change-this-secret-key-in-production-use-openssl-rand-hex-32
ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=1440

CORS_ORIGINS=http://localhost:3000,http://localhost:8080

SERVICE_HOST=0.0.0.0
SERVICE_PORT=8000

# Ejecución con Docker

Construir imagen:

docker build -t ms-auth-py .


Ejecutar contenedor:

docker run -d -p 8000:8000 --env-file .env ms-auth-py


Acceder a la API:

http://localhost:8000/docs

# Pruebas automáticas

Ejecuta todos los tests unitarios e integración con Pytest:

pytest -v


Los resultados de cobertura estarán disponibles en:

htmlcov/index.html

# Endpoints principales
Método	Ruta	Descripción
POST	/api/v1/auth/login	Autentica un usuario y genera un token JWT
POST	/api/v1/auth/register	Crea un nuevo usuario administrador
GET	/api/v1/auth/me	Devuelve los datos del usuario autenticado
GET	/api/v1/auth/health	Verifica el estado del servicio y la base de datos
POST	/api/v1/auth/logout	Cierra la sesión del usuario actual

# Ejemplo de autenticación

# Login:

POST /api/v1/auth/login
Content-Type: application/json
{
  "email": "admin@digitaltwins.com",
  "password": "admin123"
}


Respuesta:

{
  "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6...",
  "token_type": "bearer",
  "expires_in": 86400,
  "user": {
    "id": 1,
    "name": "Administrador",
    "email": "admin@digitaltwins.com",
    "role": "admin",
    "is_active": true
  }
}


# Acceso a endpoint protegido:

GET /api/v1/auth/me
Authorization: Bearer <access_token>

# Pruebas implementadas (test_*.py)

✔ Login exitoso
✔ Login con contraseña incorrecta
✔ Login con usuario inexistente
✔ Obtener usuario autenticado con token
✔ Registro de nuevo usuario
✔ Prevención de duplicados de email
✔ Verificación de contraseñas (hash bcrypt)
✔ Validación de token JWT
✔ Health check de base de datos
✔ Redirección de raíz a /docs

# Flujo general del login

El frontend (FR-LOG-RT) envía las credenciales a /api/v1/auth/login.

El microservicio MS-AUTH-PY valida el usuario en la base de datos.

Si es válido, genera un JWT.

El token se usa para acceder a los demás microservicios (MS-GEO-PY, MS-REPORT-PY, etc.).
